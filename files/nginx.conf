#
#data dir flag for scripting
#
#NGINXDATADIR=/tmp/nginx/
#
user nobody nogroup;
worker_processes  2;
worker_rlimit_nofile 8192;

#nginx start by nginx.loader and send error log to syslog
#sed to off if evn NGINXDAEMONOFF exist by /etc/init.d/nginx
daemon off;

#nginx connect()  failed (128: Unknown error) is Destination Net Unreachable
#debug | info | notice | warn | error | crit
#error_log /userdisk/nginx/log/error.log notice;
error_log stderr notice;
#sed to stderr if evn NGINXDAEMONOFF exist by /etc/init.d/nginx

#pid		logs/nginx.pid;

events {
	use epoll;
	worker_connections  4096;
}

tcp {
	server {
		listen 127.0.0.1:2199 tproxy;
		#
		access_log off;
		#
		#access_log /userdisk/nginx/log/tcp.access.log;
		#upstream fix to tproxy $dst_ip:$dst_port
		proxy_pass tproxy;
	}
}

http {
	#
	include	   mime.types;
	#default_type  application/octet-stream;

	#\t"$upstream_cache_status" replaced by \t"$sent_http_MiXr_Cache_Status"
	log_format main '"$server_addr"\t"$host"\t"$remote_addr"\t"$time_local"\t"$request_method $request_uri"\t"$status"\t"$request_length"\t"$bytes_sent"\t"$request_time"\t"$sent_http_MiXr_Cache_Status"\t"$upstream_addr"\t"$upstream_response_time"\t"$http_referer"\t"$http_user_agent"';

	#access_log /userdisk/nginx/log/access.log  main;
	access_log off;

	sendfile		on;
	#tcp_nopush	 on;

	#http://wiki.nginx.org/HttpCoreModule#server_tokens
	server_tokens off;

	#TODO: test keepalive > 0
	keepalive_timeout  0;
	#keepalive_timeout  65;

	# zeor for no max limit
	client_max_body_size 0;
	#
	proxy_buffering on;
	proxy_max_temp_file_size 2m;

	#max siz of one cache file
	proxy_max_cache_file_size 2m;

	proxy_buffer_size  256k;
	proxy_buffers   32 32k;
	proxy_busy_buffers_size 256k;

	server_names_hash_bucket_size 64;
	proxy_headers_hash_bucket_size 128;
	proxy_headers_hash_max_size 8192;

	#https://groups.google.com/forum/#!msg/openresty/sgNvuGk0tlQ/lFxfl-mg9HMJ
	#2013/08/08 11:50:03 [error] 3971#0: wrong ident 16756 response for www.youtube.com, expect 35660

	proxy_connect_timeout	186;
	proxy_read_timeout	   1200;
	proxy_send_timeout	   1200;

	#gzip  on;
	#gzip_min_length	1024;
	#gzip_proxied	   expired no-cache no-store private auth no_last_modified no_etag;
	#gzip_types		 application/json application/x-json text/css text/xml text/plain application/xml;
	#gzip_disable	   "MSIE [1-6]\.";

	#http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_path
	#DISABLED FOR NO STORAGE: proxy_cache_path /userdisk/nginx/cache/ levels=1:2 keys_zone=autocache:2m inactive=3d max_size=2g;

	preload_cache_zone zone=preload_cache_zone_one:1m;
	server {
		#
		#preload admin port
		#
		listen 127.0.0.1:1999;
		server_name  _;
		access_log  off;

		log_not_found off;

		location / {
			allow 127.0.0.1;
			deny all;
			preload_cache zone=preload_cache_zone_one;
		}
	}
	server {
		#
		#server for nginx handoff
		#
		listen 127.0.0.1:1181 tproxy;
		server_name  _;
		access_log  off;
		#access_log /userdisk/nginx/log/preload.access.log  main;

		log_not_found off;

		preload_filter zone=preload_cache_zone_one;

		#
		root /etc/nginx/htdocs/;
		index index.html index.htm;

		#disable proxy errors handle
		proxy_intercept_errors off;

		#http://wiki.nginx.org/HttpCoreModule#reset_timedout_connection
		reset_timedout_connection on;

		#
		#TPROXY DEBUG
		#
		set $proxysrcip "no-tproxy-src-ip";
		set $proxydstip "no-tproxy-dst-ip";
		set $proxydstport "no-tproxy-dst-port";
		#
		#proxy no-tproxy access direct to luaroot
		#
		set $proxyhost miwifi.com;
		set $proxyip 127.0.0.1;
		set $proxyport 1182;
		#
		#http://wiki.nginx.org/HttpRewriteModule
		#
		if ($dst_addr){
			#normal wan redirect
			set $proxyhost $host;
			set $proxydstip $dst_addr;
			set $proxyip $dst_addr;
			set $proxyport 80;
		}
		if ($dst_port) {
			set $proxydstport $dst_port;
		}
		if ($dst_port != 80){
			#no http 80 redirect
			set $proxyhost miwifi.com;
			set $proxyip 127.0.0.1;
			set $proxyport 1182;
		}
		if ($remote_addr = 127.0.0.1){
			#internal heath check
			set $proxyhost miwifi.com;
			set $proxyip 127.0.0.1;
			set $proxyport 1182;
		}
		if ($remote_addr){
			#for header
			set $proxysrcip $remote_addr;
		}
		#
		#do not need: proxy_redirect off;
		#
		proxy_set_header tproxy-dst-ip "";
		proxy_set_header Host $proxyhost;
		#

		location = /stat/proxy.shtml {
			#
			access_log  off;
			#
			add_header MiXr-StatChain STAT;
			proxy_set_header Host miwifi.com;
			proxy_pass http://127.0.0.1:1182;
			#
		}

		location / {
			#
			#DISABLED FOR NO STORAGE: include /etc/nginx/nginx.autocache.conf;
			#
			add_header MiXr-Upstream "$proxyip:$proxyport";
			add_header MiXr-Tproxy-Dst-Ip $proxydstip;
			add_header MiXr-Tproxy-Dst-Port $proxydstport;
			add_header MiXr-Tproxy-Src-Ip $proxysrcip;
			add_header MiXr-Client-Ip $remote_addr;
			add_header MiXr-Host $host;
			add_header MiXr-Http-Host $http_host;
			add_header MiXr-Server-Ip $server_addr;
			add_header MiXr-Server-Port $server_port;
			add_header MiXr-Status TPROXY;
			add_header MiXr-Preload no;
			#
			proxy_pass http://$proxyip:$proxyport;
			#
		}
		#
		error_page  404		/err/404.html;
		error_page  500		/err/500.html;
		error_page  501		/err/502.html;
		error_page  502		/err/502.html;
		error_page  503		/err/503.html;
		error_page  504		/err/504.html;
		#
		location ~ /err/ {
			#
			internal;
			#
			access_log  off;
			keepalive_timeout  0;
			#
			add_header MiXr-Upstream "$proxyip:$proxyport";
			add_header MiXr-Tproxy-Dst-Ip $proxydstip;
			add_header MiXr-Tproxy-Dst-Port $proxydstport;
			add_header MiXr-Tproxy-Src-Ip $proxysrcip;
			add_header MiXr-Client-Ip $remote_addr;
			add_header MiXr-Host $host;
			add_header MiXr-Http-Host $http_host;
			add_header MiXr-Server-Ip $server_addr;
			add_header MiXr-Server-Port $server_port;
			add_header MiXr-Preload no;
			#
			add_header MiXr-Status ERR-HTML;
			add_header Cache-Control  'private,max-age=0';
			add_header Expires '-1';
			add_header Content-Type "text/html;charset=utf-8";
			#
			root   /www/;
		}
		#
	}
}

#handoff {
#handoff replaced by filter
#	server {
#		#got traffic from iptables TCP 80 REDIRECT
#		listen 1180 tproxy;
#
#		access_log  off;
#		#access_log /userdisk/nginx/log/handoff.access.log;
#
#		proxy_buffer 1024;
#
#		timeout 3;
#
#		#no HTTP GET|HEAD stream, POST etc.
#		redirect "^[^(GET\s+)|(HEAD\s+)]" 2199;
#
#		##xunlei HTTP stream
#		#redirect "^(GET|HEAD)\s+(.*\R)+(Host|host):(\s+)?([\S]+\.xunlei\.com)\R" 2199;
#		##xunlei HTTP stream
#		#redirect "^(GET|HEAD)\s+(.*\R)+(Host|host):(\s+)?([\S]+\.sandai\.net)\R" 2199;
#
#		#normal HTTP GET|HEAD stream
#		redirect "^(GET|HEAD)\s+(.*\R)+(Host|host):(\s+)?([\S]+)\R" 1181;
#
#		# \r\n\r\n ending with GET|HEAD but without Host header
#		redirect "\R{2}" 2199;
#
#		#default after timeout
#		redirect default 2199;
#	}
#}

filter {
	server {
		listen 1180 tproxy;
		#access_log  off;
		access_log /userdisk/nginx/log/filter.access.log;
		proxy_buffer 1024;
		timeout 3;
		#no GET|HEAD request, goto tcp proxy
		redirect "^[^GH]" 2199;
		#redirect "^.[^E]" 2199;
		#redirect "^..[^T]" 2199;
		#redirect "^...[^\s]" 2199;
		redirect preload 1181 zone=preload_cache_zone_one;
		redirect "\R{2}" 2199;
		redirect default 2199;
	}
}
#
