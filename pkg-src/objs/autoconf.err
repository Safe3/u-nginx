

----------------------------------------
checking for C compiler


----------------------------------------
checking for gcc builtin atomic operations


----------------------------------------
checking for C99 variadic macros


----------------------------------------
checking for gcc variadic macros


----------------------------------------
checking for unistd.h


----------------------------------------
checking for inttypes.h


----------------------------------------
checking for limits.h


----------------------------------------
checking for sys/filio.h

objs/autotest.c:3:23: 致命错误： sys/filio.h：没有那个文件或目录
编译中断。
----------


#include <sys/filio.h>

int main() {
    return 0;
}

----------
gcc -o objs/autotest objs/autotest.c
----------

----------------------------------------
checking for sys/param.h


----------------------------------------
checking for sys/mount.h


----------------------------------------
checking for sys/statvfs.h


----------------------------------------
checking for crypt.h


----------------------------------------
checking for epoll


----------------------------------------
checking for sendfile()


----------------------------------------
checking for sendfile64()


----------------------------------------
checking for sys/prctl.h


----------------------------------------
checking for prctl(PR_SET_DUMPABLE)


----------------------------------------
checking for sched_setaffinity()


----------------------------------------
checking for crypt_r()


----------------------------------------
checking for sys/vfs.h


----------------------------------------
checking for poll()


----------------------------------------
checking for /dev/poll

objs/autotest.c:4:25: 致命错误： sys/devpoll.h：没有那个文件或目录
编译中断。
----------

#include <sys/types.h>
#include <unistd.h>
#include <sys/devpoll.h>

int main() {
    int  n, dp; struct dvpoll  dvp;
                  dp = 0;
                  dvp.dp_fds = NULL;
                  dvp.dp_nfds = 0;
                  dvp.dp_timeout = 0;
                  n = ioctl(dp, DP_POLL, &dvp);
                  if (n == -1) return 1;
    return 0;
}

----------
gcc -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -o objs/autotest objs/autotest.c
----------

----------------------------------------
checking for kqueue

objs/autotest.c:4:23: 致命错误： sys/event.h：没有那个文件或目录
编译中断。
----------

#include <sys/types.h>
#include <unistd.h>
#include <sys/event.h>

int main() {
    int kq; kq = kqueue();
    return 0;
}

----------
gcc -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -o objs/autotest objs/autotest.c
----------

----------------------------------------
checking for crypt()

/tmp/cctCy7w8.o: In function `main':
autotest.c:(.text+0xf): undefined reference to `crypt'
collect2: ld 返回 1
----------

#include <sys/types.h>
#include <unistd.h>


int main() {
    crypt("test", "salt");;
    return 0;
}

----------
gcc -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -o objs/autotest objs/autotest.c
----------

----------------------------------------
checking for crypt() in libcrypt


----------------------------------------
checking for F_READAHEAD

objs/autotest.c: 在函数‘main’中:
objs/autotest.c:7:14: 错误： ‘F_READAHEAD’未声明(在此函数内第一次使用)
objs/autotest.c:7:14: 附注： 每个未声明的标识符在其出现的函数内只报告一次
----------

#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>

int main() {
    fcntl(0, F_READAHEAD, 1);;
    return 0;
}

----------
gcc -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -o objs/autotest objs/autotest.c
----------

----------------------------------------
checking for posix_fadvise()


----------------------------------------
checking for O_DIRECT


----------------------------------------
checking for F_NOCACHE

objs/autotest.c: 在函数‘main’中:
objs/autotest.c:7:14: 错误： ‘F_NOCACHE’未声明(在此函数内第一次使用)
objs/autotest.c:7:14: 附注： 每个未声明的标识符在其出现的函数内只报告一次
----------

#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>

int main() {
    fcntl(0, F_NOCACHE, 1);;
    return 0;
}

----------
gcc -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -o objs/autotest objs/autotest.c
----------

----------------------------------------
checking for directio()

objs/autotest.c: 在函数‘main’中:
objs/autotest.c:8:17: 错误： ‘DIRECTIO_ON’未声明(在此函数内第一次使用)
objs/autotest.c:8:17: 附注： 每个未声明的标识符在其出现的函数内只报告一次
----------

#include <sys/types.h>
#include <unistd.h>
#include <sys/types.h>
                  #include <sys/fcntl.h>

int main() {
    directio(0, DIRECTIO_ON);;
    return 0;
}

----------
gcc -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -o objs/autotest objs/autotest.c
----------

----------------------------------------
checking for statfs()


----------------------------------------
checking for statvfs()


----------------------------------------
checking for dlopen()

/tmp/ccnqjGUn.o: In function `main':
autotest.c:(.text+0xf): undefined reference to `dlopen'
collect2: ld 返回 1
----------

#include <sys/types.h>
#include <unistd.h>
#include <dlfcn.h>

int main() {
    dlopen(NULL, 0);
    return 0;
}

----------
gcc -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -o objs/autotest objs/autotest.c
----------

----------------------------------------
checking for dlopen() in libdl


----------------------------------------
checking for sched_yield()


----------------------------------------
checking for SO_SETFIB

objs/autotest.c: 在函数‘main’中:
objs/autotest.c:7:31: 错误： ‘SO_SETFIB’未声明(在此函数内第一次使用)
objs/autotest.c:7:31: 附注： 每个未声明的标识符在其出现的函数内只报告一次
----------

#include <sys/types.h>
#include <unistd.h>
#include <sys/socket.h>

int main() {
    setsockopt(0, SOL_SOCKET, SO_SETFIB, NULL, 4);
    return 0;
}

----------
gcc -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -o objs/autotest objs/autotest.c
----------

----------------------------------------
checking for SO_ACCEPTFILTER

objs/autotest.c: 在函数‘main’中:
objs/autotest.c:7:31: 错误： ‘SO_ACCEPTFILTER’未声明(在此函数内第一次使用)
objs/autotest.c:7:31: 附注： 每个未声明的标识符在其出现的函数内只报告一次
----------

#include <sys/types.h>
#include <unistd.h>
#include <sys/socket.h>

int main() {
    setsockopt(0, SOL_SOCKET, SO_ACCEPTFILTER, NULL, 0);
    return 0;
}

----------
gcc -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -o objs/autotest objs/autotest.c
----------

----------------------------------------
checking for TCP_DEFER_ACCEPT


----------------------------------------
checking for TCP_KEEPIDLE, TCP_KEEPINTVL, TCP_KEEPCNT


----------------------------------------
checking for TCP_INFO


----------------------------------------
checking for accept4()


----------------------------------------
checking for int size


----------------------------------------
checking for long size


----------------------------------------
checking for long long size


----------------------------------------
checking for void * size


----------------------------------------
checking for uint64_t


----------------------------------------
checking for sig_atomic_t


----------------------------------------
checking for sig_atomic_t size


----------------------------------------
checking for socklen_t


----------------------------------------
checking for in_addr_t


----------------------------------------
checking for in_port_t


----------------------------------------
checking for rlim_t


checking for uintptr_t

checking for system byte ordering

----------------------------------------
checking for size_t size


----------------------------------------
checking for off_t size


----------------------------------------
checking for time_t size


----------------------------------------
checking for AF_INET6


----------------------------------------
checking for Linux TPROXY support


----------------------------------------
checking for setproctitle()

/tmp/ccUHrNme.o: In function `main':
autotest.c:(.text+0xf): undefined reference to `setproctitle'
collect2: ld 返回 1
----------

#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>

int main() {
    setproctitle("test");;
    return 0;
}

----------
gcc -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -o objs/autotest objs/autotest.c
----------

----------------------------------------
checking for pread()


----------------------------------------
checking for pwrite()


----------------------------------------
checking for sys_nerr

135
----------------------------------------
checking for localtime_r()


----------------------------------------
checking for posix_memalign()


----------------------------------------
checking for memalign()


----------------------------------------
checking for mmap(MAP_ANON|MAP_SHARED)


----------------------------------------
checking for mmap("/dev/zero", MAP_SHARED)


----------------------------------------
checking for System V shared memory


----------------------------------------
checking for POSIX semaphores

/tmp/ccQjB9gy.o: In function `main':
autotest.c:(.text+0x29): undefined reference to `sem_init'
autotest.c:(.text+0x41): undefined reference to `sem_destroy'
collect2: ld 返回 1
----------

#include <sys/types.h>
#include <unistd.h>
#include <semaphore.h>

int main() {
    sem_t  sem;
                  if (sem_init(&sem, 1, 0) == -1) return 1;
                  sem_destroy(&sem);;
    return 0;
}

----------
gcc -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -o objs/autotest objs/autotest.c
----------

----------------------------------------
checking for POSIX semaphores in libpthread


----------------------------------------
checking for struct msghdr.msg_control


----------------------------------------
checking for ioctl(FIONBIO)


----------------------------------------
checking for struct tm.tm_gmtoff


----------------------------------------
checking for struct dirent.d_namlen

objs/autotest.c: 在函数‘main’中:
objs/autotest.c:8:28: 错误： ‘struct dirent’没有名为‘d_namlen’的成员
objs/autotest.c:9:41: 错误： ‘struct dirent’没有名为‘d_namlen’的成员
----------

#include <sys/types.h>
#include <unistd.h>
#include <dirent.h>
                  #include <stdio.h>

int main() {
    struct dirent  dir; dir.d_namlen = 0;
                  printf("%d", (int) dir.d_namlen);
    return 0;
}

----------
gcc -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -o objs/autotest objs/autotest.c
----------

----------------------------------------
checking for struct dirent.d_type


----------------------------------------
checking for sysconf(_SC_NPROCESSORS_ONLN)


----------------------------------------
checking for openat(), fstatat()


----------------------------------------
checking for nginx_tcp_module


----------------------------------------
checking for nginx_handoff_module


----------------------------------------
checking for nginx_filter_module


----------------------------------------
checking for LuaJIT library in /usr/lib/x86_64-linux-gnu/ and /usr/include/luajit-2.0 (specified by the LUAJIT_LIB and LUAJIT_INC env)


----------------------------------------
checking for export symbols by default


----------------------------------------
checking for SO_PASSCRED


----------------------------------------
checking for PCRE library


----------------------------------------
checking for PCRE JIT support

objs/autotest.c: 在函数‘main’中:
objs/autotest.c:8:43: 错误： ‘PCRE_CONFIG_JIT’未声明(在此函数内第一次使用)
objs/autotest.c:8:43: 附注： 每个未声明的标识符在其出现的函数内只报告一次
----------

#include <sys/types.h>
#include <unistd.h>
#include <pcre.h>

int main() {
    int jit = 0;
                              pcre_config(PCRE_CONFIG_JIT, &jit);
                              if (jit != 1) return 1;;
    return 0;
}

----------
gcc -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -o objs/autotest objs/autotest.c -lpcre
----------

----------------------------------------
checking for OpenSSL library


----------------------------------------
checking for zlib library

